import java.util.ArrayList;
import java.util.Scanner;

class Car {
	private String carId;
	private String brand;
	private String model;
	private int basePrice;
	boolean isAvailable;

	Car(String carId, String brand, String model, int basePrice) {
		this.carId = carId;
		this.brand = brand;
		this.model = model;
		this.basePrice = basePrice;
		this.isAvailable = true;
	}

	public String getCarId() {
		return carId;
	}

	public String getBrand() {
		return brand;
	}

	public String getModel() {
		return model;
	}

	public int calculateRent(int days) {
		return basePrice*days;
	}

	public boolean isAvailable() {
		return isAvailable;
	}

	public void Rent() {
		isAvailable = false;
	}

	public void returnRent() {
		isAvailable = true;
	}
}

class Customer {
	private String customerId;
	private String customerName;

	Customer(String customerId, String customerName) {
		this.customerId = customerId;
		this.customerName = customerName;
	}

	public String customerId() {
		return customerId;
	}

	public String customerName() {
		return customerName;
	}
}

class Rental {
	private Car car;
	private Customer customer;
	private int days;

	Rental(Car car, Customer customer, int days) {
		this.car = car;
		this.customer = customer;
		this.days = days;
	}

	public Car getCar() {
		return car;
	}

	public Customer getCustomer() {
		return customer;
	}

	public int getDays() {
		return days;
	}
}

class RentalSystem {
	private ArrayList<Car> cars;
	private ArrayList<Customer> customers;
	private ArrayList<Rental> rentals;

	RentalSystem() {
		cars = new ArrayList<>();
		customers = new ArrayList<>();
		rentals = new ArrayList<>();
	}

	public void addCar(Car car) {
		cars.add(car);
	}

	public void addCustomer(Customer customer) {
		customers.add(customer);
	}

	public void rentCar(Car car, Customer customer, int days) {
		if(car.isAvailable()) {
			car.Rent();
			rentals.add(new Rental(car, customer, days));
		}
		else {
			System.out.print("Car is not Available right now.");
		}
	}

	public void returnCar(Car car) {
		car.returnRent();
		Rental rentalToremove = null;
		for(Rental rental : rentals) {
			if(rental.getCar() == car) {
				rentalToremove = rental;
				break;
			}
		}

		if(rentalToremove != null) {
			rentals.remove(rentalToremove);
			System.out.println("Car returned Successfully.");
		}
		else {
			System.out.println("Car did not rented.");
		}
	}

	public void menu() {
		Scanner sc = new Scanner(System.in);

		while(true) {
			System.out.println("===== Car Rental System =====");
			System.out.println("1. Rent a Car");
			System.out.println("2. Return a Car");
			System.out.println("3. Exit");
			System.out.print("Enter your choice: ");

			int choice = sc.nextInt();
			sc.nextLine();

			if(choice == 1) {
				System.out.println("\n== Rent a Car ==\n");
				System.out.print("Enter your Name: ");
				String customerName = sc.nextLine();

				System.out.println("\nAvailable Cars:");

				for (Car car : cars) {
					if (car.isAvailable()) {
						System.out.println(car.getCarId() + " - " + car.getBrand() + " " + car.getModel());
					}
				}

				System.out.print("\nEnter the car ID you want to rent: ");
				String carId = sc.nextLine();

				System.out.print("Enter the number of days for rental: ");
				int rentalDays = sc.nextInt();
				sc.nextLine();

				Customer newCustomer = new Customer("CUS" + (customers.size() + 1), customerName);
				addCustomer(newCustomer);

				Car selectedCar = null;
				for (Car car : cars) {
					if (car.getCarId().equals(carId) && car.isAvailable()) {
						selectedCar = car;
						break;
					}
				}

				if (selectedCar != null) {
					int totalPrice = selectedCar.calculateRent(rentalDays);
					System.out.println("\n== Rental Information ==\n");
					System.out.println("Customer ID: " + newCustomer.customerId());
					System.out.println("Customer Name: " + newCustomer.customerName());
					System.out.println("Car: " + selectedCar.getBrand() + " " + selectedCar.getModel());
					System.out.println("Rental Days: " + rentalDays);
					System.out.print("Total Price: "+ totalPrice);

					System.out.print("\nConfirm rental (Y/N): ");
					String confirm = sc.nextLine();

					if (confirm.equalsIgnoreCase("Y")) {
						rentCar(selectedCar, newCustomer, rentalDays);
						System.out.println("\nCar rented successfully.");
					} else {
						System.out.println("\nRental canceled.");
					}
				} else {
					System.out.println("\nInvalid car selection or car not available for rent.");
				}
			}
			else if (choice == 2) {
				System.out.println("\n== Return a Car ==\n");
				System.out.print("Enter the car ID you want to return: ");
				String carId = sc.nextLine();

				Car carToReturn = null;
				for (Car car : cars) {
					if (car.getCarId().equals(carId) && !car.isAvailable()) {
						carToReturn = car;
						break;
					}
				}

				if (carToReturn != null) {
					Customer customer = null;
					for (Rental rental : rentals) {
						if (rental.getCar() == carToReturn) {
							customer = rental.getCustomer();
							break;
						}
					}

					if (customer != null) {
						returnCar(carToReturn);
						System.out.println("Car returned successfully by " + customer.customerName());
					} else {
						System.out.println("Car was not rented or rental information is missing.");
					}
				} else {
					System.out.println("Invalid car ID or car is not rented.");
				}
			} else if (choice == 3) {
				break;
			} else {
				System.out.println("Invalid choice. Please enter a valid option.");
			}
		}

		System.out.println("\nThank you for using the Car Rental System!");
	}

}

public class Main
{
	public static void main(String[] args) {
		RentalSystem rentalSystem = new RentalSystem();

		Car car1 = new Car("C001", "Toyota", "Camry", 60);
		Car car2 = new Car("C002", "Honda", "Accord", 70);
		Car car3 = new Car("C003", "Mahindra", "Thar", 150);
		rentalSystem.addCar(car1);
		rentalSystem.addCar(car2);
		rentalSystem.addCar(car3);

		rentalSystem.menu();
	}
}
